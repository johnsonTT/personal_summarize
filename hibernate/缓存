一级缓存：
一级缓存是hibernate自带的，不受用户干预，其生命周期和session的生命周期一致，当前session一旦关闭，一级缓存就会消失，
因此，一级缓存也叫session缓存或者事务级缓存，一级缓存只存储实体对象，不会缓存一般的对象属性，
即：当获得对象后，就将该对象缓存起来，如果在同一个session中再去获取这个对象时，它会先判断缓存中有没有这个对象的ID，
如果有，就直接从缓存中取出，否则，则去访问数据库，取了以后同时会将这个对象缓存起来。

二级缓存：
二级缓存也称为进程缓存或者sessionFactory级的缓存，它可以被所有的session共享，
二级缓存的生命周期和sessionFactory的生命周期一致，二级缓存也是只存储实体对象。
二级缓存的一般过程如下：
①：条件查询的时候，获取查询到的实体对象
②：把获得到的所有数据对象根据ID放到二级缓存中
③：当Hibernate根据ID访问数据对象时，首先从sesison的一级缓存中查，查不到的时候如果配置了二级缓存，会从二级缓存中查找，
   如果还查不到，再查询数据库，把结果按照ID放入到缓存中
④：进行delete、update、add操作时会同时更新缓存

查询缓存：
查询缓存是对普通属性结果集的缓存，对实体对象的结果集只缓存id，对于经常使用的查询语句，如果启用了查询缓存，
当第一次执行查询语句时，Hibernate会把查询结果存放在二级缓存中，以后再次执行该查询语句时，只需从缓存中获得查询结果，从而提高查询性能，
查询缓存中以键值对的方式存储的，key键为查询的条件语句（具体的key规则应该是：类名+方法名+参数列表），value为查询之后等到的结果集的ID列表。
查询缓存的一般过程如下：
①：Query Cache保存了之前查询执行过的SelectSQL，以及结果集等信息组成一个Query Key
②：当再次遇到查询请求的时候，就会根据QueryKey从QueryCache中找，找到就返回，但当数据表发生数据变动的话，hbiernate就会自动清除QueryCache中对应的Query Key
我们从查询缓存的策略中可以看出，Query Cache只有在特定的条件下才会发挥作用，而且要求相当严格：
①：完全相同的SelectSQL重复执行
②：重复执行期间，QueryKey对应的数据表不能有数据变动

实例：
<!--开启二级缓存 -->
<prop key="hibernate.cache.use_second_level_cache">true</prop>		
<!--开启查询缓存 -->
<prop key="hibernate.cache.use_query_cache">true</prop>	

通过注解指定User类使用二级缓存
@Entity
@Table(name="tq_user")
@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class User

在底层代码手动开启查询缓存
query.setCacheable(true);

总结：
（1）、当只是用hibernate查询缓存，而关闭二级缓存的时候:
①如果查询的是部分属性结果集，那么当第二次查询的时候就不会发出SQL语句，直接从Hibernate查询缓存中取数据
②如果查询的是实体结果集(eg.from User)这个HQL，那么查询出来的实体，首先hibernate查询缓存存放实体的ID，
第二次查询的时候，就到hibernate查询缓存中取出ID一条一条的到数据库查询，这样将发出N条SQL语句，造成SQL泛滥。
所以，在使用查询缓存的时候，最好配合开启二级缓存。
（2）、当开启Hibernate查询缓存和二级缓存的时候:
①如果查询的是部分属性结果集，这个和上面只用hbiernate查询缓存而关闭二级缓存的时候一致，因为不涉及实体，不会用到二级缓存。
②如果查询的是实体结果集，那么查询出来的实体首先在查询缓存中存放实体的ID，并将实体对象保存到二级缓存中，
第二次查询的时候，就到hibernate查询缓存中取ID，根据ID去二级缓存中匹配数据，如果有数据就不会发出sql语句，
如果都有，第二次查询一条SQL语句都不会发出，直接从二级缓存中取数据。
